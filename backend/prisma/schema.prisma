generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model accessTokens {
  user_id     Int       @id
  accessToken String    @db.VarChar(256)
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  users       users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk2_user_id0")
}

model apartments {
  apartment_id   Int     @id @default(autoincrement())
  apartment_name String  @db.VarChar(255)
  storey_id      Int
  stories        stories @relation(fields: [storey_id], references: [storey_id], map: "fk1_storey_id")
  rooms          rooms[]

  @@index([storey_id], map: "fk1_storey_id")
}

model buildings {
  building_id   Int       @id @default(autoincrement())
  building_name String    @db.VarChar(255)
  project_id    Int
  projects      projects  @relation(fields: [project_id], references: [project_id], map: "buildings_ibfk_1")
  stories       stories[]

  @@index([project_id], map: "fk_buildings_1_idx")
}

model hashedPasses {
  hashed_pass_id Int    @id @default(autoincrement())
  hashed_pass    String @db.VarChar(256)
  user_id        Int
  users          users  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk1_user_id")

  @@index([user_id], map: "fk1_user_id_idx")
}

model materials {
  material_id      Int              @id @default(autoincrement())
  material_name    String           @unique(map: "material_name") @db.VarChar(255)
  material_categ   String           @db.VarChar(255)
  material_u_value Decimal          @db.Decimal(4, 2)
  roomBoundaries   roomBoundaries[]
}

model projects {
  project_id   Int           @id @default(autoincrement())
  project_name String        @db.VarChar(255)
  owner_id     Int
  buildings    buildings[]
  projectUser  projectUser[]
  users        users         @relation(fields: [owner_id], references: [user_id], map: "fk_user_id_2")

  @@index([owner_id], map: "fk1_owner_id_idx")
}

model roomBoundaries {
  baundary_id                          Int       @id @default(autoincrement())
  baundary_name                        String?   @db.VarChar(255)
  baundary_material                    Int
  baundary_area                        Int
  boundary_length                      Int?
  boundary_width                       Int?
  boundary_is_shared                   Boolean?  @default(false)
  room1_id                             Int
  room2_id                             Int?
  rooms_roomBoundaries_room1_idTorooms rooms     @relation("roomBoundaries_room1_idTorooms", fields: [room1_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction, map: "roomBoundaries_ibfk_1")
  rooms_roomBoundaries_room2_idTorooms rooms?    @relation("roomBoundaries_room2_idTorooms", fields: [room2_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction, map: "roomBoundaries_ibfk_2")
  materials                            materials @relation(fields: [baundary_material], references: [material_id], onDelete: NoAction, onUpdate: NoAction, map: "roomBoundaries_ibfk_3")

  @@index([room2_id], map: "room2_id")
  @@index([room1_id], map: "roomBoundaries_ibfk_1_idx")
  @@index([baundary_material], map: "roomBoundaries_ibfk_3_idx")
}

model rooms {
  room_id                                       Int              @id @default(autoincrement())
  room_name                                     String           @db.VarChar(255)
  apartment_id                                  Int
  roomBoundaries_roomBoundaries_room1_idTorooms roomBoundaries[] @relation("roomBoundaries_room1_idTorooms")
  roomBoundaries_roomBoundaries_room2_idTorooms roomBoundaries[] @relation("roomBoundaries_room2_idTorooms")
  apartments                                    apartments       @relation(fields: [apartment_id], references: [apartment_id], map: "rooms_ibfk_1")

  @@index([apartment_id], map: "fk_apartmentId_idx")
}

model stories {
  storey_id   Int          @id @default(autoincrement())
  storey_name String       @db.VarChar(45)
  building_id Int
  apartments  apartments[]
  buildings   buildings    @relation(fields: [building_id], references: [building_id], map: "fk_stories_1")

  @@index([building_id], map: "fk_Storey_1_idx")
}

model temperatures {
  temperature_id    Int    @id @default(autoincrement())
  temperature_name  String @unique(map: "temperature_name_UNIQUE") @db.VarChar(45)
  temperature_value Int
}

model users {
  user_id      Int            @id @default(autoincrement())
  user_email   String         @unique(map: "user_email_UNIQUE") @db.VarChar(45)
  user_role    String?        @db.VarChar(45)
  accessTokens accessTokens?
  hashedPasses hashedPasses[]
  projectUser  projectUser[]
  projects     projects[]
}

model projectUser {
  projectUser_id Int      @id @default(autoincrement())
  project_id     Int
  user_id        Int
  projects       projects @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction, map: "fk1_project_id")
  users          users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_user_id")

  @@index([project_id], map: "fk_projectUser_1_idx")
  @@index([user_id], map: "fk_projectUser_2_idx")
}
